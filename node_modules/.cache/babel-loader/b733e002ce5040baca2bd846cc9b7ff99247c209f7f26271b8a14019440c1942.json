{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\Code\\\\REACT_NODE\\\\ReactJS\\\\frontend\\\\src\\\\ProtectedRoutes\\\\ProtectedRoute.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate, Outlet, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useAuth = () => {\n  // get auth state and user role\n  const role = sessionStorage.getItem('userRole');\n  console.log(role);\n  return role;\n};\nconst ProtectedRoute = ({\n  allowedRoles\n}) => {\n  _s();\n  const auth = useAuth();\n  const location = useLocation();\n  if (!auth) {\n    // Redirect to login if not authenticated\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\",\n      replace: true,\n      state: {\n        from: location\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 12\n    }, this);\n  } else if (!allowedRoles.includes(auth)) {\n    // Redirect to unauthorized page if not authorized\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/unauthorized\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  }\n  //Create more else if there more redirects \n\n  return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 10\n  }, this); // Render children routes if authorized\n};\n_s(ProtectedRoute, \"HRLOLLAXFjObMMH3UCaG4AIfmXk=\", false, function () {\n  return [useAuth, useLocation];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","Outlet","useLocation","jsxDEV","_jsxDEV","useAuth","role","sessionStorage","getItem","console","log","ProtectedRoute","allowedRoles","_s","auth","location","to","replace","state","from","fileName","_jsxFileName","lineNumber","columnNumber","includes","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Documents/Code/REACT_NODE/ReactJS/frontend/src/ProtectedRoutes/ProtectedRoute.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Navigate, Outlet, useLocation } from 'react-router-dom';\r\nconst useAuth = () => {\r\n  // get auth state and user role\r\n  const role  = sessionStorage.getItem('userRole');\r\n  console.log(role)\r\n  return role;\r\n};\r\nconst ProtectedRoute = ({ allowedRoles }) => {\r\n  const auth = useAuth();\r\n  const location = useLocation();\r\n  if (!auth) {\r\n    // Redirect to login if not authenticated\r\n    return <Navigate to=\"/\" replace state={{ from: location }} />;\r\n  } else if (!allowedRoles.includes(auth)) {\r\n    // Redirect to unauthorized page if not authorized\r\n    return <Navigate to=\"/unauthorized\" replace />;\r\n  }\r\n  //Create more else if there more redirects \r\n\r\n  return <Outlet />; // Render children routes if authorized\r\n};\r\nexport default ProtectedRoute;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,MAAM,EAAEC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACjE,MAAMC,OAAO,GAAGA,CAAA,KAAM;EACpB;EACA,MAAMC,IAAI,GAAIC,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC;EAChDC,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;EACjB,OAAOA,IAAI;AACb,CAAC;AACD,MAAMK,cAAc,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAMC,IAAI,GAAGT,OAAO,CAAC,CAAC;EACtB,MAAMU,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAC9B,IAAI,CAACY,IAAI,EAAE;IACT;IACA,oBAAOV,OAAA,CAACJ,QAAQ;MAACgB,EAAE,EAAC,GAAG;MAACC,OAAO;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAEJ;MAAS;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC/D,CAAC,MAAM,IAAI,CAACX,YAAY,CAACY,QAAQ,CAACV,IAAI,CAAC,EAAE;IACvC;IACA,oBAAOV,OAAA,CAACJ,QAAQ;MAACgB,EAAE,EAAC,eAAe;MAACC,OAAO;IAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAChD;EACA;;EAEA,oBAAOnB,OAAA,CAACH,MAAM;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,CAAC,CAAC;AACrB,CAAC;AAACV,EAAA,CAbIF,cAAc;EAAA,QACLN,OAAO,EACHH,WAAW;AAAA;AAAAuB,EAAA,GAFxBd,cAAc;AAcpB,eAAeA,cAAc;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}