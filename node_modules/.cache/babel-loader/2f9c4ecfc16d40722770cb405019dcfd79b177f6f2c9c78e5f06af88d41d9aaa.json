{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\Code\\\\REACT_NODE\\\\ReactJS\\\\frontend\\\\src\\\\Components\\\\AuthenContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Define the context with the AuthContextType\nexport const AuthContext = /*#__PURE__*/createContext({\n  auth: null,\n  // Provide initial value for auth based on its type\n  storeUserData: () => {},\n  // Provide a placeholder function for storeUserData\n  logout: () => {}\n});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [auth, setAuth] = useState(null); // Use the 'auth' type from the context type\n  // Function to store user data in sessionStorage\n  const storeUserData = userData => {\n    // Save the user data in the state\n    setAuth(userData);\n    // Also update the sessionStorage\n    sessionStorage.setItem('auth', JSON.stringify(userData));\n  };\n  //Log out the user\n  const redirect = useNavigate();\n  //useNavigate to rediract the user back to the login screen\n  const logout = () => {\n    // Clear the user data in the state\n    setAuth(null);\n    // Also clear the sessionStorage and user role\n    sessionStorage.removeItem('userRole');\n    sessionStorage.removeItem('auth');\n    redirect(\"/\");\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      auth,\n      storeUserData,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n// Custom hook to use the auth context\n_s(AuthProvider, \"Vl/GFlyHSgImfCUtI7u0d3yM0n8=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useNavigate","jsxDEV","_jsxDEV","AuthContext","auth","storeUserData","logout","AuthProvider","children","_s","setAuth","userData","sessionStorage","setItem","JSON","stringify","redirect","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Admin/Documents/Code/REACT_NODE/ReactJS/frontend/src/Components/AuthenContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\r\nimport { GoogleUser, Creator } from '../Interfaces/UserInterface';\r\nimport { useNavigate } from 'react-router-dom';\r\ninterface AuthContextType {\r\n  auth: Creator | null; //User is the predefine interface for user login account\r\n  storeUserData: (userData: Creator) => void; // Replace 'any' with the actual type of your user data\r\n  logout:()=>void; //\r\n}\r\n// Define the context with the AuthContextType\r\nexport const AuthContext = createContext<AuthContextType>({\r\n  auth: null, // Provide initial value for auth based on its type\r\n  storeUserData: () => {}, // Provide a placeholder function for storeUserData\r\n  logout:()=>{}\r\n});\r\nexport const AuthProvider = ({ children }: { children: React.ReactNode }) => {\r\n    const [auth, setAuth] = useState<AuthContextType['auth']>(null); // Use the 'auth' type from the context type\r\n    // Function to store user data in sessionStorage\r\n    const storeUserData = (userData: AuthContextType['auth']) => {\r\n        // Save the user data in the state\r\n        setAuth(userData);\r\n        // Also update the sessionStorage\r\n        sessionStorage.setItem('auth', JSON.stringify(userData));\r\n    };\r\n    //Log out the user\r\n    const redirect = useNavigate()\r\n    //useNavigate to rediract the user back to the login screen\r\n    const logout = () => {\r\n        // Clear the user data in the state\r\n        setAuth(null);\r\n        // Also clear the sessionStorage and user role\r\n        sessionStorage.removeItem('userRole')\r\n        sessionStorage.removeItem('auth')\r\n        redirect(\"/\")\r\n    };\r\n    return (\r\n        <AuthContext.Provider value={{ auth, storeUserData,logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n// Custom hook to use the auth context\r\nexport const useAuth = () => {\r\n    return useContext(AuthContext);\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAElE,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAM/C;AACA,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAkB;EACxDO,IAAI,EAAE,IAAI;EAAE;EACZC,aAAa,EAAEA,CAAA,KAAM,CAAC,CAAC;EAAE;EACzBC,MAAM,EAACA,CAAA,KAAI,CAAC;AACd,CAAC,CAAC;AACF,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAwC,CAAC,KAAK;EAAAC,EAAA;EACzE,MAAM,CAACL,IAAI,EAAEM,OAAO,CAAC,GAAGZ,QAAQ,CAA0B,IAAI,CAAC,CAAC,CAAC;EACjE;EACA,MAAMO,aAAa,GAAIM,QAAiC,IAAK;IACzD;IACAD,OAAO,CAACC,QAAQ,CAAC;IACjB;IACAC,cAAc,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC;EAC5D,CAAC;EACD;EACA,MAAMK,QAAQ,GAAGhB,WAAW,CAAC,CAAC;EAC9B;EACA,MAAMM,MAAM,GAAGA,CAAA,KAAM;IACjB;IACAI,OAAO,CAAC,IAAI,CAAC;IACb;IACAE,cAAc,CAACK,UAAU,CAAC,UAAU,CAAC;IACrCL,cAAc,CAACK,UAAU,CAAC,MAAM,CAAC;IACjCD,QAAQ,CAAC,GAAG,CAAC;EACjB,CAAC;EACD,oBACId,OAAA,CAACC,WAAW,CAACe,QAAQ;IAACC,KAAK,EAAE;MAAEf,IAAI;MAAEC,aAAa;MAACC;IAAO,CAAE;IAAAE,QAAA,EACvDA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AACD;AAAAd,EAAA,CA1BaF,YAAY;EAAA,QAUJP,WAAW;AAAA;AAAAwB,EAAA,GAVnBjB,YAAY;AA2BzB,OAAO,MAAMkB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACzB,OAAO3B,UAAU,CAACI,WAAW,CAAC;AAClC,CAAC;AAACuB,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}