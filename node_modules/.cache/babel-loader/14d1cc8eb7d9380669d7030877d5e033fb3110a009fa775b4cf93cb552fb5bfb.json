{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\Code\\\\REACT_NODE\\\\ReactJS\\\\Frontend-SWP301\\\\src\\\\Login\\\\Norm\\\\NormalLogin.tsx\";\nimport axios from 'axios';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst accounturl = 'https://localhost:7233/api/Account';\nconst creatorurl = 'https://localhost:7233/api/Creator/';\nconst roleurl = 'https://localhost:7233/api/Role/';\nexport function NormalLogin() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"NormalLogin\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_c = NormalLogin;\nexport async function CheckLogin(checkAccount, storeUserData) {\n  try {\n    const response = await axios.get(accounturl);\n    const listOfAccounts = response.data;\n    const foundAccount = listOfAccounts.find(account => account.email === checkAccount.email && account.password === checkAccount.password);\n    if (foundAccount) {\n      //Get the user roles\n      const userroleResponse = await axios.get(roleurl + foundAccount.roleID);\n      const userrole = userroleResponse.data;\n      //Store the user role in sesison\n      sessionStorage.setItem('userRole', userrole.roleName);\n      // Once the user is verified, get additional user data.\n      const creatorResponse = await axios.get(creatorurl + foundAccount.accountID);\n      const creatorData = creatorResponse.data;\n      const creatorWithoutTheImages = {\n        ...creatorData,\n        profilePicture: '',\n        backgroundPicture: ''\n      };\n      storeUserData(creatorWithoutTheImages);\n    } else {\n      alert(\"No account found\");\n    }\n  } catch (err) {\n    console.log(err);\n  }\n}\n_c2 = CheckLogin;\nvar _c, _c2;\n$RefreshReg$(_c, \"NormalLogin\");\n$RefreshReg$(_c2, \"CheckLogin\");","map":{"version":3,"names":["axios","React","jsxDEV","_jsxDEV","accounturl","creatorurl","roleurl","NormalLogin","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","CheckLogin","checkAccount","storeUserData","response","get","listOfAccounts","data","foundAccount","find","account","email","password","userroleResponse","roleID","userrole","sessionStorage","setItem","roleName","creatorResponse","accountID","creatorData","creatorWithoutTheImages","profilePicture","backgroundPicture","alert","err","console","log","_c2","$RefreshReg$"],"sources":["C:/Users/Admin/Documents/Code/REACT_NODE/ReactJS/Frontend-SWP301/src/Login/Norm/NormalLogin.tsx"],"sourcesContent":["import axios from 'axios'\r\nimport React from 'react'\r\nimport { Creator } from '../../Interfaces/UserInterface';\r\n\r\n\r\nconst accounturl = 'https://localhost:7233/api/Account'\r\nconst creatorurl = 'https://localhost:7233/api/Creator/'\r\nconst roleurl = 'https://localhost:7233/api/Role/'\r\n\r\ntype initialUser = {\r\n  accountID:number,\r\n  roleID:number,\r\n  password: \"\",\r\n  email: \"\",\r\n}\r\n\r\ntype roles = {\r\n  roleID:number,\r\n  roleName:string,\r\n  description:string\r\n}\r\n\r\nexport function NormalLogin() {\r\n  return (\r\n    <div>NormalLogin</div>\r\n  )\r\n}\r\n\r\nexport async function CheckLogin(checkAccount:initialUser, storeUserData:any) {\r\n  try {\r\n    const response = await axios.get(accounturl);\r\n    const listOfAccounts = response.data;\r\n    const foundAccount:initialUser = listOfAccounts.find((account: { email: string; password: string }) => account.email === checkAccount.email && account.password === checkAccount.password);\r\n    if (foundAccount) {\r\n      //Get the user roles\r\n      const userroleResponse = await axios.get(roleurl+foundAccount.roleID);\r\n      const userrole:roles = userroleResponse.data;\r\n      //Store the user role in sesison\r\n      sessionStorage.setItem('userRole', userrole.roleName);\r\n       // Once the user is verified, get additional user data.\r\n      const creatorResponse = await axios.get(creatorurl + foundAccount.accountID);\r\n      const creatorData:Creator = creatorResponse.data;\r\n      const creatorWithoutTheImages = {\r\n        ...creatorData,\r\n        profilePicture:'',\r\n        backgroundPicture:''\r\n      }\r\n      storeUserData(creatorWithoutTheImages);\r\n    } else {\r\n      alert(\"No account found\");\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAIzB,MAAMC,UAAU,GAAG,oCAAoC;AACvD,MAAMC,UAAU,GAAG,qCAAqC;AACxD,MAAMC,OAAO,GAAG,kCAAkC;AAelD,OAAO,SAASC,WAAWA,CAAA,EAAG;EAC5B,oBACEJ,OAAA;IAAAK,QAAA,EAAK;EAAW;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAE1B;AAACC,EAAA,GAJeN,WAAW;AAM3B,OAAO,eAAeO,UAAUA,CAACC,YAAwB,EAAEC,aAAiB,EAAE;EAC5E,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAACd,UAAU,CAAC;IAC5C,MAAMe,cAAc,GAAGF,QAAQ,CAACG,IAAI;IACpC,MAAMC,YAAwB,GAAGF,cAAc,CAACG,IAAI,CAAEC,OAA4C,IAAKA,OAAO,CAACC,KAAK,KAAKT,YAAY,CAACS,KAAK,IAAID,OAAO,CAACE,QAAQ,KAAKV,YAAY,CAACU,QAAQ,CAAC;IAC1L,IAAIJ,YAAY,EAAE;MAChB;MACA,MAAMK,gBAAgB,GAAG,MAAM1B,KAAK,CAACkB,GAAG,CAACZ,OAAO,GAACe,YAAY,CAACM,MAAM,CAAC;MACrE,MAAMC,QAAc,GAAGF,gBAAgB,CAACN,IAAI;MAC5C;MACAS,cAAc,CAACC,OAAO,CAAC,UAAU,EAAEF,QAAQ,CAACG,QAAQ,CAAC;MACpD;MACD,MAAMC,eAAe,GAAG,MAAMhC,KAAK,CAACkB,GAAG,CAACb,UAAU,GAAGgB,YAAY,CAACY,SAAS,CAAC;MAC5E,MAAMC,WAAmB,GAAGF,eAAe,CAACZ,IAAI;MAChD,MAAMe,uBAAuB,GAAG;QAC9B,GAAGD,WAAW;QACdE,cAAc,EAAC,EAAE;QACjBC,iBAAiB,EAAC;MACpB,CAAC;MACDrB,aAAa,CAACmB,uBAAuB,CAAC;IACxC,CAAC,MAAM;MACLG,KAAK,CAAC,kBAAkB,CAAC;IAC3B;EACF,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EAClB;AACF;AAACG,GAAA,GA1BqB5B,UAAU;AAAA,IAAAD,EAAA,EAAA6B,GAAA;AAAAC,YAAA,CAAA9B,EAAA;AAAA8B,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}