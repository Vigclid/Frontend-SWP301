{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\Code\\\\REACT_NODE\\\\ReactJS\\\\Frontend-SWP301\\\\src\\\\Login\\\\Google\\\\LoginWithGoogle.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useGoogleLogin } from '@react-oauth/google';\nimport GoogleIcon from '@mui/icons-material/Google';\nimport Button from '@mui/material/Button';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../Components/AuthenContext.tsx';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function LoginWithGoogle({\n  disableOutsideClick,\n  handleClick\n}) {\n  _s();\n  const accounturl = 'https://localhost:7233/api/Account';\n  const creatorurl = 'https://localhost:7233/api/Creator/';\n  const roleurl = 'https://localhost:7233/api/Role/';\n  const {\n    storeUserData\n  } = useAuth();\n  //Call the custom hook to store user login information\n  const navigate = useNavigate();\n\n  //This Method will able you to fetch Google Authentication Token and use Google API to fetch user gmail account info without needing a Backend\n  const googleAPI = 'https://www.googleapis.com/oauth2/v3/userinfo'; // URL to googleapis to authenticate user token\n  const onClick = useGoogleLogin({\n    onSuccess: async response => {\n      console.log(response);\n      const token = response.access_token;\n      //Using Axios to fetch API from Google\n      //Async await to synchonize fetching data\n      //TODO: Remove console.log when finish testing\n      const ggAccount = await axios.get(googleAPI, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(response => response.data);\n      const listOfAccounts = await axios.get(accounturl).then(response => response.data);\n      const foundAccount = listOfAccounts.find(account => account.email === ggAccount.email);\n      if (foundAccount) {\n        //Get the user roles\n        const userroleResponse = await axios.get(roleurl + foundAccount.roleID);\n        const userrole = userroleResponse.data;\n        //Store the user role in sesison\n        sessionStorage.setItem('userRole', userrole.roleName);\n        // Once the user is verified, get additional user data.\n        const creatorResponse = await axios.get(creatorurl + foundAccount.accountID);\n        const creatorData = creatorResponse.data;\n        const creatorWithoutTheImages = {\n          ...creatorData,\n          profilePicture: '',\n          backgroundPicture: ''\n        };\n        storeUserData(creatorWithoutTheImages);\n        window.dispatchEvent(new Event('userLoggedIn'));\n        if (userrole.roleName === \"AD\") {\n          navigate('/admin');\n        } else {\n          navigate('/characters');\n        }\n      }\n    },\n    onError: error => {\n      console.log(error);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => onClick(),\n      variant: \"contained\",\n      startIcon: /*#__PURE__*/_jsxDEV(GoogleIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 20\n      }, this),\n      fullWidth: true,\n      sx: {\n        backgroundColor: '#DB4437',\n        color: 'white'\n      },\n      children: \"Login with Google\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(LoginWithGoogle, \"ChXR4nBt+0O8572A/y6JKeswszM=\", false, function () {\n  return [useAuth, useNavigate, useGoogleLogin];\n});\n_c = LoginWithGoogle;\nvar _c;\n$RefreshReg$(_c, \"LoginWithGoogle\");","map":{"version":3,"names":["React","useState","useGoogleLogin","GoogleIcon","Button","axios","useNavigate","useAuth","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginWithGoogle","disableOutsideClick","handleClick","_s","accounturl","creatorurl","roleurl","storeUserData","navigate","googleAPI","onClick","onSuccess","response","console","log","token","access_token","ggAccount","get","headers","Authorization","then","data","listOfAccounts","foundAccount","find","account","email","userroleResponse","roleID","userrole","sessionStorage","setItem","roleName","creatorResponse","accountID","creatorData","creatorWithoutTheImages","profilePicture","backgroundPicture","window","dispatchEvent","Event","onError","error","children","variant","startIcon","fileName","_jsxFileName","lineNumber","columnNumber","fullWidth","sx","backgroundColor","color","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Documents/Code/REACT_NODE/ReactJS/Frontend-SWP301/src/Login/Google/LoginWithGoogle.jsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { useGoogleLogin } from '@react-oauth/google'\r\nimport GoogleIcon from '@mui/icons-material/Google';\r\nimport Button from '@mui/material/Button';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useAuth } from '../../Components/AuthenContext.tsx';\r\nexport default function LoginWithGoogle({ disableOutsideClick, handleClick }) {\r\n  const accounturl = 'https://localhost:7233/api/Account'\r\n  const creatorurl = 'https://localhost:7233/api/Creator/'\r\n  const roleurl = 'https://localhost:7233/api/Role/'\r\n\r\n  const { storeUserData } = useAuth();\r\n  //Call the custom hook to store user login information\r\n  const navigate = useNavigate();\r\n\r\n  //This Method will able you to fetch Google Authentication Token and use Google API to fetch user gmail account info without needing a Backend\r\n  const googleAPI = 'https://www.googleapis.com/oauth2/v3/userinfo' // URL to googleapis to authenticate user token\r\n  const onClick = useGoogleLogin({\r\n    onSuccess: async response => {\r\n      console.log(response);\r\n      const token = (response.access_token);\r\n      //Using Axios to fetch API from Google\r\n      //Async await to synchonize fetching data\r\n      //TODO: Remove console.log when finish testing\r\n     const ggAccount = await axios.get(googleAPI, { headers: { Authorization: `Bearer ${token}` } }).then(response => response.data)\r\n     const listOfAccounts = await axios.get(accounturl).then(response => response.data)\r\n     const foundAccount = listOfAccounts.find((account) => account.email === ggAccount.email);\r\n      if (foundAccount) {\r\n         //Get the user roles\r\n      const userroleResponse = await axios.get(roleurl+foundAccount.roleID);\r\n      const userrole = userroleResponse.data;\r\n      //Store the user role in sesison\r\n      sessionStorage.setItem('userRole', userrole.roleName);\r\n       // Once the user is verified, get additional user data.\r\n      const creatorResponse = await axios.get(creatorurl + foundAccount.accountID);\r\n      const creatorData = creatorResponse.data;\r\n      const creatorWithoutTheImages = {\r\n        ...creatorData,\r\n        profilePicture:'',\r\n        backgroundPicture:''\r\n      }\r\n      storeUserData(creatorWithoutTheImages);\r\n        window.dispatchEvent(new Event('userLoggedIn'));\r\n        if (userrole.roleName === \"AD\") {\r\n          navigate('/admin');\r\n        } else {\r\n          navigate('/characters');\r\n        }\r\n      }\r\n\r\n    },\r\n    onError: error => { console.log(error) }\r\n  }, [])\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={() => onClick()}\r\n        variant=\"contained\"\r\n        startIcon={<GoogleIcon />}\r\n        fullWidth\r\n        sx={{ backgroundColor: '#DB4437', color: 'white' }}\r\n      >\r\n        Login with Google\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}