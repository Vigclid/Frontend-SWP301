{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\Code\\\\REACT_NODE\\\\ReactJS\\\\frontend\\\\src\\\\Components\\\\Themes\\\\ThemeProvider.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n//type Theme =  string\n// const lightimages = [\n//   \"/sliderImages/day1.png\",\n//   \"/sliderImages/day2.png\",\n//   \"/sliderImages/day3.png\",\n//   \"/sliderImages/day4.png\",\n//   ]\n// const darkimages = [\n//   \"/sliderImages/night1.png\",\n//   \"/sliderImages/night2.png\",\n//   \"/sliderImages/night3.png\",\n//   \"/sliderImages/night4.png\",\n//   ]\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst darkimages = [\"/images/dark.jpg\"];\nconst lightimages = [\"/images/light.jpg\"];\n\n// public folder is in the same order as the src. \n//To import images from public: started the path from inside the public folder.\n// ex: /<imagefolder>/image.png\nconst Theme = {\n  light: {\n    color4: 'white',\n    color3: '#A1A1A1',\n    color2: '#0096FA',\n    color: '#0096FA',\n    backgroundColor: '#FFF',\n    backgroundColor2: '#06b8eb',\n    backgroundColor3: '#CEE1F2',\n    rgbBackgroundColor: \"255, 255, 255\",\n    backgroundImage: lightimages,\n    transition: \"all 1s ease-in-out\",\n    borderColor: \"cyan\",\n    hoverBackgroundColor: \"#F5F5F5\"\n  },\n  dark: {\n    color4: '#61dafb',\n    color3: '#ECECEC',\n    color2: '#EBEBEB',\n    color: '#61dafb',\n    backgroundColor: '#1a1a2e',\n    backgroundColor2: '#1a1a2e',\n    backgroundColor3: '#cbe7efe6',\n    rgbBackgroundColor: \"26, 26, 46\",\n    backgroundImage: darkimages,\n    transition: \"all 1s ease-in-out\",\n    borderColor: \"red\",\n    hoverBackgroundColor: \"#302e4d\"\n  }\n};\nconst initialState = {\n  dark: false,\n  theme: Theme.light,\n  toggleTheme: () => {}\n};\nconst ThemeContext = /*#__PURE__*/React.createContext(initialState);\nfunction ThemeProvider({\n  children\n}) {\n  _s();\n  const getInitialTheme = () => {\n    const savedTheme = localStorage.getItem('isDarkMode');\n    return savedTheme !== null ? JSON.parse(savedTheme) : false;\n  };\n  const [dark, SetDark] = useState(getInitialTheme); // Now we get state from function\n  useEffect(() => {\n    // Update local storage when the theme changes\n    localStorage.setItem('isDarkMode', JSON.stringify(dark));\n  }, [dark]);\n  const toggleTheme = () => {\n    SetDark(prevDark => !prevDark); // Toggles dark mode without a separate state change\n  };\n  const theme = dark ? Theme.dark : Theme.light;\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      dark,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(ThemeProvider, \"Hm8vQTikRHfQJ/92fOMEQojj/3o=\");\n_c = ThemeProvider;\nexport { ThemeContext, ThemeProvider };\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","darkimages","lightimages","Theme","light","color4","color3","color2","color","backgroundColor","backgroundColor2","backgroundColor3","rgbBackgroundColor","backgroundImage","transition","borderColor","hoverBackgroundColor","dark","initialState","theme","toggleTheme","ThemeContext","createContext","ThemeProvider","children","_s","getInitialTheme","savedTheme","localStorage","getItem","JSON","parse","SetDark","setItem","stringify","prevDark","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Documents/Code/REACT_NODE/ReactJS/frontend/src/Components/Themes/ThemeProvider.tsx"],"sourcesContent":["import React, {useState,useEffect} from 'react'\r\n\r\n\r\n//type Theme =  string\r\n// const lightimages = [\r\n//   \"/sliderImages/day1.png\",\r\n//   \"/sliderImages/day2.png\",\r\n//   \"/sliderImages/day3.png\",\r\n//   \"/sliderImages/day4.png\",\r\n//   ]\r\n// const darkimages = [\r\n//   \"/sliderImages/night1.png\",\r\n//   \"/sliderImages/night2.png\",\r\n//   \"/sliderImages/night3.png\",\r\n//   \"/sliderImages/night4.png\",\r\n//   ]\r\nconst darkimages = [\r\n  \"/images/dark.jpg\",\r\n]\r\nconst lightimages = [\r\n  \"/images/light.jpg\",\r\n]\r\n\r\n// public folder is in the same order as the src. \r\n//To import images from public: started the path from inside the public folder.\r\n// ex: /<imagefolder>/image.png\r\nconst Theme = {\r\n  light:{\r\n    color4:'white',\r\n    color3:'#A1A1A1',\r\n    color2:'#0096FA',\r\n    color:'#0096FA',\r\n    backgroundColor:'#FFF',\r\n    backgroundColor2:'#06b8eb',\r\n    backgroundColor3:'#CEE1F2',\r\n    rgbBackgroundColor:\"255, 255, 255\",\r\n    backgroundImage: lightimages,\r\n    transition: \"all 1s ease-in-out\",\r\n\r\n    borderColor:\"cyan\",\r\n    hoverBackgroundColor:\"#F5F5F5\",\r\n  },\r\n  dark:{\r\n    color4:'#61dafb',\r\n    color3:'#ECECEC',\r\n    color2:'#EBEBEB',\r\n    color:'#61dafb',\r\n    backgroundColor:'#1a1a2e',\r\n    backgroundColor2:'#1a1a2e',\r\n    backgroundColor3:'#cbe7efe6',\r\n    rgbBackgroundColor:\"26, 26, 46\",\r\n    backgroundImage: darkimages,\r\n    transition: \"all 1s ease-in-out\",\r\n    borderColor:\"red\",\r\n    hoverBackgroundColor:\"#302e4d\",\r\n\r\n  },\r\n}\r\n\r\nconst initialState = {\r\n  dark: false,\r\n  theme: Theme.light,\r\n  toggleTheme: () => {},\r\n}\r\n\r\nconst ThemeContext = React.createContext(initialState);\r\n\r\nfunction ThemeProvider({children}) {\r\n  const getInitialTheme = () => {\r\n    const savedTheme = localStorage.getItem('isDarkMode');\r\n    return savedTheme !== null ? JSON.parse(savedTheme) : false;\r\n  };\r\n  const [dark, SetDark] = useState(getInitialTheme); // Now we get state from function\r\n  useEffect(() => {\r\n    // Update local storage when the theme changes\r\n    localStorage.setItem('isDarkMode', JSON.stringify(dark));\r\n  }, [dark]);\r\n  const toggleTheme = () => {\r\n    SetDark(prevDark => !prevDark); // Toggles dark mode without a separate state change\r\n  }\r\n  const theme = dark ? Theme.dark : Theme.light\r\n  return (\r\n    <ThemeContext.Provider value={{theme,dark,toggleTheme}}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\n\r\nexport {ThemeContext,ThemeProvider}"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAACC,SAAS,QAAO,OAAO;;AAG/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,UAAU,GAAG,CACjB,kBAAkB,CACnB;AACD,MAAMC,WAAW,GAAG,CAClB,mBAAmB,CACpB;;AAED;AACA;AACA;AACA,MAAMC,KAAK,GAAG;EACZC,KAAK,EAAC;IACJC,MAAM,EAAC,OAAO;IACdC,MAAM,EAAC,SAAS;IAChBC,MAAM,EAAC,SAAS;IAChBC,KAAK,EAAC,SAAS;IACfC,eAAe,EAAC,MAAM;IACtBC,gBAAgB,EAAC,SAAS;IAC1BC,gBAAgB,EAAC,SAAS;IAC1BC,kBAAkB,EAAC,eAAe;IAClCC,eAAe,EAAEX,WAAW;IAC5BY,UAAU,EAAE,oBAAoB;IAEhCC,WAAW,EAAC,MAAM;IAClBC,oBAAoB,EAAC;EACvB,CAAC;EACDC,IAAI,EAAC;IACHZ,MAAM,EAAC,SAAS;IAChBC,MAAM,EAAC,SAAS;IAChBC,MAAM,EAAC,SAAS;IAChBC,KAAK,EAAC,SAAS;IACfC,eAAe,EAAC,SAAS;IACzBC,gBAAgB,EAAC,SAAS;IAC1BC,gBAAgB,EAAC,WAAW;IAC5BC,kBAAkB,EAAC,YAAY;IAC/BC,eAAe,EAAEZ,UAAU;IAC3Ba,UAAU,EAAE,oBAAoB;IAChCC,WAAW,EAAC,KAAK;IACjBC,oBAAoB,EAAC;EAEvB;AACF,CAAC;AAED,MAAME,YAAY,GAAG;EACnBD,IAAI,EAAE,KAAK;EACXE,KAAK,EAAEhB,KAAK,CAACC,KAAK;EAClBgB,WAAW,EAAEA,CAAA,KAAM,CAAC;AACtB,CAAC;AAED,MAAMC,YAAY,gBAAGzB,KAAK,CAAC0B,aAAa,CAACJ,YAAY,CAAC;AAEtD,SAASK,aAAaA,CAAC;EAACC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EACjC,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACrD,OAAOF,UAAU,KAAK,IAAI,GAAGG,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,GAAG,KAAK;EAC7D,CAAC;EACD,MAAM,CAACV,IAAI,EAAEe,OAAO,CAAC,GAAGnC,QAAQ,CAAC6B,eAAe,CAAC,CAAC,CAAC;EACnD5B,SAAS,CAAC,MAAM;IACd;IACA8B,YAAY,CAACK,OAAO,CAAC,YAAY,EAAEH,IAAI,CAACI,SAAS,CAACjB,IAAI,CAAC,CAAC;EAC1D,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EACV,MAAMG,WAAW,GAAGA,CAAA,KAAM;IACxBY,OAAO,CAACG,QAAQ,IAAI,CAACA,QAAQ,CAAC,CAAC,CAAC;EAClC,CAAC;EACD,MAAMhB,KAAK,GAAGF,IAAI,GAAGd,KAAK,CAACc,IAAI,GAAGd,KAAK,CAACC,KAAK;EAC7C,oBACEJ,OAAA,CAACqB,YAAY,CAACe,QAAQ;IAACC,KAAK,EAAE;MAAClB,KAAK;MAACF,IAAI;MAACG;IAAW,CAAE;IAAAI,QAAA,EACpDA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B;AAAChB,EAAA,CAnBQF,aAAa;AAAAmB,EAAA,GAAbnB,aAAa;AAsBtB,SAAQF,YAAY,EAACE,aAAa;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}