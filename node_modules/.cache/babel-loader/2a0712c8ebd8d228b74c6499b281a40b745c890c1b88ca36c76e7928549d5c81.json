{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\Code\\\\REACT_NODE\\\\ReactJS\\\\frontend\\\\src\\\\Components\\\\StyledMUI\\\\CustomizedTypography.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { Typography } from '@mui/material';\nimport { ThemeContext } from '../Themes/ThemeProvider.tsx';\n\n// Extend this function to accept props for further customization\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomizedTypography = ({\n  children,\n  ...props\n}) => {\n  _s();\n  const {\n    theme,\n    dark\n  } = useContext(ThemeContext);\n  const styles = {\n    light: {\n      color: theme.color,\n      transition: \"all 1s ease-in-out\"\n    },\n    dark: {\n      color: theme.color,\n      transition: \"all 1s ease-in-out\"\n    }\n  };\n  const customStyle = dark ? styles.dark : styles.light;\n  return /*#__PURE__*/_jsxDEV(Typography, {\n    variant: \"h4\" // default variant, can pass a different one as a prop if needed\n    ,\n    component: \"h2\",\n    gutterBottom: true,\n    style: {\n      ...customStyle,\n      textAlign: 'center'\n    } // allows custom inline styles\n    ,\n    ...props,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_s(CustomizedTypography, \"FWq69ReFPN1UGFZTFJynOceJ9qA=\");\n_c = CustomizedTypography;\nexport default CustomizedTypography;\nvar _c;\n$RefreshReg$(_c, \"CustomizedTypography\");","map":{"version":3,"names":["React","useContext","Typography","ThemeContext","jsxDEV","_jsxDEV","CustomizedTypography","children","props","_s","theme","dark","styles","light","color","transition","customStyle","variant","component","gutterBottom","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Documents/Code/REACT_NODE/ReactJS/frontend/src/Components/StyledMUI/CustomizedTypography.jsx"],"sourcesContent":["import React, { useContext } from 'react';\r\nimport { Typography, } from '@mui/material';\r\nimport { ThemeContext } from '../Themes/ThemeProvider.tsx';\r\n\r\n// Extend this function to accept props for further customization\r\nconst CustomizedTypography = ({ children, ...props }) => {\r\n    const { theme,dark } = useContext(ThemeContext)\r\n    const styles = {\r\n        light:{\r\n          color: theme.color ,\r\n          transition: \"all 1s ease-in-out\",\r\n          \r\n        },\r\n        dark:{\r\n          color: theme.color,\r\n          transition: \"all 1s ease-in-out\",\r\n        }\r\n      };\r\n      const customStyle = dark ? styles.dark : styles.light;\r\n    return (\r\n\r\n        <Typography\r\n            variant=\"h4\" // default variant, can pass a different one as a prop if needed\r\n            component=\"h2\"\r\n            gutterBottom\r\n            style={{ ...customStyle,textAlign:'center' }} // allows custom inline styles\r\n            {...props} // ensures any other Typography props can be passed\r\n        >\r\n            {children} \r\n        </Typography>\r\n\r\n    );\r\n};\r\nexport default CustomizedTypography;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,UAAU,QAAS,eAAe;AAC3C,SAASC,YAAY,QAAQ,6BAA6B;;AAE1D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,oBAAoB,GAAGA,CAAC;EAAEC,QAAQ;EAAE,GAAGC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACrD,MAAM;IAAEC,KAAK;IAACC;EAAK,CAAC,GAAGV,UAAU,CAACE,YAAY,CAAC;EAC/C,MAAMS,MAAM,GAAG;IACXC,KAAK,EAAC;MACJC,KAAK,EAAEJ,KAAK,CAACI,KAAK;MAClBC,UAAU,EAAE;IAEd,CAAC;IACDJ,IAAI,EAAC;MACHG,KAAK,EAAEJ,KAAK,CAACI,KAAK;MAClBC,UAAU,EAAE;IACd;EACF,CAAC;EACD,MAAMC,WAAW,GAAGL,IAAI,GAAGC,MAAM,CAACD,IAAI,GAAGC,MAAM,CAACC,KAAK;EACvD,oBAEIR,OAAA,CAACH,UAAU;IACPe,OAAO,EAAC,IAAI,CAAC;IAAA;IACbC,SAAS,EAAC,IAAI;IACdC,YAAY;IACZC,KAAK,EAAE;MAAE,GAAGJ,WAAW;MAACK,SAAS,EAAC;IAAS,CAAE,CAAC;IAAA;IAAA,GAC1Cb,KAAK;IAAAD,QAAA,EAERA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAGrB,CAAC;AAAChB,EAAA,CA3BIH,oBAAoB;AAAAoB,EAAA,GAApBpB,oBAAoB;AA4B1B,eAAeA,oBAAoB;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}